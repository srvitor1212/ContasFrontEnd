@inject NavigationManager nav
@inject HttpClient http


<EditForm Model="@entrada">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div>
        <label>Nome :</label>
        <div>
            <InputText @bind-Value="entrada.Nome" class="form-control col-sm-3" />
            <ValidationMessage For="() => entrada.Nome"></ValidationMessage>
        </div>
    </div>
    <div>
        <label>Valor :</label>
        <div>
            <InputNumber placeholder="1320,40" @bind-Value="entrada.Valor" class="form-control col-sm-3" />
        </div>
    </div>
    <div>
        <label>Recebo até :</label>
        <div>
            <CalendarioMesAno DataInicial="entrada.DataVigencia" />
        </div>
    </div>

    <div>&nbsp;</div>
    <ValidationSummary></ValidationSummary>
    <div class="btn-group">
        <button class="btn btn-success" onclick="@Enviar">Salvar</button>
        <button class="btn btn-outline-primary" onclick="@Voltar">Voltar</button>
    </div>
</EditForm>


@code {
    Entrada entrada = new Entrada();

    protected override void OnInitialized()
    {
        InicializarCampos();
    }

    private void InicializarCampos()
    {
        DateTime agora = DateTime.UtcNow;
        DateTime dataUltimoDiaMes = new DateTime(
            year: agora.Year,
            month: agora.Month,
            day: DateTime.DaysInMonth(agora.Year, agora.Month)
        );
        entrada.DataVigencia = dataUltimoDiaMes;
        entrada.Valor = null;
    }

    private void Enviar()
    {
        if (entrada.Valor == null)
            entrada.Valor = 0;
        PostEntrada();
    }

    private void Voltar()
    {
        nav.NavigateTo("/entradas");
    }

    // ==================
    async Task PostEntrada()
    {
        //await http.PostAsJsonAsync("https://localhost:7229/api/Entradas", entrada);

        using (var client = new HttpClient())
        {
            client.BaseAddress = new System.Uri("https://localhost:5001/");
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("text/plain"));
            HttpResponseMessage response = await client.GetAsync("api/Entradas");
            if (response.IsSuccessStatusCode)
            {  //GET

                var teste = response.Content.ReadAsStringAsync();
                string texto = teste.Result;

                var eventoMpd = JsonConvert.DeserializeObject<List<Entrada>>(texto);



                string debug = "";

                // Entrada entrada = await response.Content.ReadAsAsync<Entrada>();
                // Console.WriteLine("{0}\tR${1}\t{2}", produto.Nome, produto.Preco, produto.Categoria);
                // Console.WriteLine("Produto acessado e exibido.  Tecle algo para incluir um novo produto.");
                // Console.ReadKey();
            }


            ////POST
            //var cha = new Produto() { Nome = "Chá Verde", Preco = 1.50M, Categoria = "Bebidas" };
            //response = await client.PostAsJsonAsync("api/produtos", cha);
            //Console.WriteLine("Produto cha verde incluído. Tecle algo para atualizar o preço do produto.");
            //Console.ReadKey();
            //if (response.IsSuccessStatusCode)
            //{   //PUT
            //    Uri chaUrl = response.Headers.Location;
            //    cha.Preco = 2.55M;   // atualiza o preco do produto
            //    response = await client.PutAsJsonAsync(chaUrl, cha);
            //    Console.WriteLine("Produto preço do atualizado. Tecle algo para excluir o produto");
            //    Console.ReadKey();
            //    //DELETE
            //    response = await client.DeleteAsync(chaUrl);
            //    Console.WriteLine("Produto deletado");
            //    Console.ReadKey();
            //}
        }
    }
}